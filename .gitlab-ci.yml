stages:
  - swagger
  - prepare
  - build
  - deploy

image: golang:1.22-alpine

variables:
  GIT_STRATEGY: fetch  # To ensure the current branch is updated when pushing changes

swagger:
  stage: swagger
  script:
    - apk add --no-cache git  # Install Git
    - go install github.com/swaggo/swag/cmd/swag@latest  # Install swag if needed
    - swag fmt
    - set -e  # Exit on any error
    - swag init || { echo "Swagger generation failed"; exit 1; }
    - git checkout -B $CI_COMMIT_REF_NAME  # Checkout the branch explicitly
    - |
      if ! git diff --exit-code; then
        git config --global user.email "ci@git.cpe.kmutt.ac.th"
        git config --global user.name "CI Bot - [Zuck-my-clothe]"
        git add .
        git commit -m "Update Swagger documentation"
        git push https://gitlab-ci-token:$CI_PUSH_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git $CI_COMMIT_REF_NAME
      else
        echo "No changes in Swagger documentation."
      fi


vet:
  stage: prepare
  script:
    - go mod download
    - go vet

unit-test:
  stage: prepare
  script:
    - go test ./...

build:
  stage: build
  needs:
    - vet
    - unit-test
  dependencies:
    - vet
    - unit-test
  script:
    - go build

deploy:
  stage: deploy
  only:
    - main
  needs:
    - build
  dependencies:
    - build
  script:
    - apk add --no-cache openssh-client curl
    - |
      curl -H "Content-Type: application/json" \
           -d '{"content": "ðŸš€ Backend Deployment started!"}' \
           $DISCORD_WEBHOOK
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - ssh-keyscan $DEPLOY_SERVER > ~/.ssh/known_hosts
    - echo "$ENV" > .env
    - scp -r * .env $DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_PATH
    - ssh $DEPLOY_USER@$DEPLOY_SERVER 'cd cpe334/backend && docker compose down && docker compose --env-file .env up -d --build'
    - |
      curl -H "Content-Type: application/json" \
           -d '{"content": "âœ… Backend Deployment complete!"}' \
           $DISCORD_WEBHOOK
