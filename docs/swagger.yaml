basePath: /
definitions:
  model.AddMachine:
    properties:
      branch_id:
        type: string
      createdBy:
        type: string
      machine_label:
        type: integer
      machine_serial:
        type: string
      machine_type:
        $ref: '#/definitions/model.MachineType'
      weight:
        minimum: 0
        type: integer
    required:
    - branch_id
    - machine_label
    - machine_serial
    - machine_type
    - weight
    type: object
  model.AddMachineReportDTO:
    properties:
      machine_serial:
        type: string
      report_desc:
        type: string
    required:
    - machine_serial
    - report_desc
    type: object
  model.AddUserAddressDTO:
    properties:
      address:
        type: string
      address_id:
        type: string
      district:
        type: string
      lat:
        type: number
      long:
        type: number
      province:
        type: string
      subdistrict:
        type: string
      zipcode:
        type: string
    required:
    - address
    - district
    - lat
    - long
    - province
    - subdistrict
    - zipcode
    type: object
  model.AuthenDetail:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      phone:
        type: string
      profile_image_url:
        type: string
      role:
        $ref: '#/definitions/model.Roles'
      user_id:
        type: string
    type: object
  model.AuthenPayload:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/model.Roles'
      user_id:
        type: string
    type: object
  model.AuthenResponse:
    properties:
      data:
        $ref: '#/definitions/model.AuthenDetail'
      token:
        type: string
    type: object
  model.Branch:
    properties:
      branch_detail:
        type: string
      branch_id:
        type: string
      branch_lat:
        type: number
      branch_long:
        type: number
      branch_name:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        example: "null"
        type: string
      deleted_by:
        type: string
      owner_user_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  model.BranchDetail:
    properties:
      average_star:
        type: number
      branch_detail:
        type: string
      branch_id:
        type: string
      branch_lat:
        type: number
      branch_long:
        type: number
      branch_name:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        example: "null"
        type: string
      deleted_by:
        type: string
      distance:
        type: number
      machines:
        items:
          $ref: '#/definitions/model.MachineInBranch'
        type: array
      owner_user_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
      user_reviews:
        items:
          $ref: '#/definitions/model.UserReview'
        type: array
    type: object
  model.CreateBranch:
    properties:
      branch_detail:
        type: string
      branch_lat:
        type: number
      branch_long:
        type: number
      branch_name:
        type: string
      owner_user_id:
        type: string
    required:
    - branch_detail
    - branch_lat
    - branch_long
    - branch_name
    - owner_user_id
    type: object
  model.EmployeeContract:
    properties:
      branch_id:
        type: string
      contract_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        example: "null"
        type: string
      deleted_by:
        type: string
      position_id:
        type: string
      user_id:
        type: string
    type: object
  model.EmployeeContractDTO:
    properties:
      branch_id:
        type: string
      created_by:
        type: string
      position_id:
        type: string
      user_id:
        type: string
    required:
    - branch_id
    - created_by
    - position_id
    - user_id
    type: object
  model.FullOrder:
    properties:
      branch_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        example: "null"
        type: string
      deleted_by:
        type: string
      delivery_address:
        type: string
      delivery_lat:
        type: number
      delivery_long:
        type: number
      order_details:
        items:
          $ref: '#/definitions/model.OrderDetail'
        type: array
      order_header_id:
        type: string
      order_note:
        type: string
      payment_id:
        type: string
      review_comment:
        type: string
      star_rating:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
      user_id:
        type: string
      zuck_onsite:
        type: boolean
    type: object
  model.Machine:
    properties:
      branch_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        example: "null"
        type: string
      deleted_by:
        type: string
      is_active:
        type: boolean
      machine_label:
        type: string
      machine_serial:
        type: string
      machine_type:
        $ref: '#/definitions/model.MachineType'
      updated_at:
        type: string
      updated_by:
        type: string
      weight:
        type: integer
    type: object
  model.MachineInBranch:
    properties:
      finished_at:
        type: string
      is_available:
        type: boolean
      machine_label:
        type: string
      machine_serial:
        type: string
      machine_type:
        $ref: '#/definitions/model.MachineType'
      weight:
        type: integer
    type: object
  model.MachineReportDetail:
    properties:
      branch:
        $ref: '#/definitions/model.BranchDetail'
      created_at:
        type: string
      deleted_at:
        example: "null"
        type: string
      machine_serial:
        type: string
      report_desc:
        type: string
      report_id:
        type: string
      report_status:
        $ref: '#/definitions/model.MachineReportStatus'
      user_id:
        type: string
    type: object
  model.MachineReportStatus:
    enum:
    - Pending
    - In Progress
    - Fixed
    - Cancel
    type: string
    x-enum-varnames:
    - ReportPending
    - ReportInProgress
    - ReportFixed
    - ReportCanceled
  model.MachineType:
    enum:
    - Washer
    - Dryer
    type: string
    x-enum-varnames:
    - Washer
    - Dryer
  model.NewOrder:
    properties:
      branch_id:
        type: string
      delivery_address:
        type: string
      delivery_lat:
        type: number
      delivery_long:
        type: number
      order_details:
        items:
          $ref: '#/definitions/model.NewOrderDetail'
        type: array
      order_note:
        type: string
      userID:
        type: string
      zuck_onsite:
        type: boolean
    required:
    - branch_id
    - order_details
    type: object
  model.NewOrderDetail:
    properties:
      machine_serial:
        type: string
      service_type:
        $ref: '#/definitions/model.ServiceType'
      weight:
        type: integer
    required:
    - service_type
    - weight
    type: object
  model.OrderDetail:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        example: "null"
        type: string
      deleted_by:
        type: string
      finished_at:
        type: string
      machine_serial:
        type: string
      order_basket_id:
        type: string
      order_header_id:
        type: string
      order_status:
        $ref: '#/definitions/model.OrderStatus'
      service_type:
        $ref: '#/definitions/model.ServiceType'
      updated_at:
        type: string
      updated_by:
        type: string
      weight:
        type: integer
    type: object
  model.OrderHeader:
    properties:
      branch_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        example: "null"
        type: string
      deleted_by:
        type: string
      delivery_address:
        type: string
      delivery_lat:
        type: number
      delivery_long:
        type: number
      order_header_id:
        type: string
      order_note:
        type: string
      payment_id:
        type: string
      review_comment:
        type: string
      star_rating:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
      user_id:
        type: string
      zuck_onsite:
        type: boolean
    type: object
  model.OrderReview:
    properties:
      order_header_id:
        type: string
      review_comment:
        type: string
      star_rating:
        maximum: 5
        minimum: 1
        type: integer
      userID:
        type: string
    required:
    - order_header_id
    - star_rating
    type: object
  model.OrderStatus:
    enum:
    - Waiting
    - Processing
    - Completed
    - Canceled
    type: string
    x-enum-varnames:
    - Waiting
    - Processing
    - Completed
    - Canceled
  model.PaymentStatus:
    enum:
    - Pending
    - Paid
    - Expired
    - Cancel
    type: string
    x-enum-varnames:
    - Pending
    - Paid
    - Expired
    - Cancel
  model.Payments:
    properties:
      amount:
        type: number
      created_at:
        type: string
      deleted_at:
        example: "null"
        type: string
      due_date:
        type: string
      payment_id:
        type: string
      payment_status:
        $ref: '#/definitions/model.PaymentStatus'
    required:
    - amount
    type: object
  model.RequestBody:
    properties:
      accessToken:
        type: string
    type: object
  model.Roles:
    enum:
    - SuperAdmin
    - BranchManager
    - Employee
    - Client
    type: string
    x-enum-varnames:
    - SuperAdmin
    - BranchManager
    - Employee
    - Client
  model.ServiceType:
    enum:
    - Washing
    - Drying
    - Delivery
    type: string
    x-enum-varnames:
    - Washing
    - Drying
    - Delivery
  model.UpdateBranch:
    properties:
      branch_detail:
        type: string
      branch_id:
        type: string
      branch_lat:
        type: number
      branch_long:
        type: number
      branch_name:
        type: string
      owner_user_id:
        type: string
    required:
    - branch_detail
    - branch_id
    - branch_lat
    - branch_long
    - branch_name
    - owner_user_id
    type: object
  model.UpdateMachineReportStatusDTO:
    properties:
      report_id:
        type: string
      report_status:
        $ref: '#/definitions/model.MachineReportStatus'
    required:
    - report_id
    - report_status
    type: object
  model.UpdateOrder:
    properties:
      finished_at:
        type: string
      machine_serial:
        type: string
      order_basket_id:
        type: string
      order_status:
        $ref: '#/definitions/model.OrderStatus'
      updatedBy:
        type: string
    required:
    - order_basket_id
    type: object
  model.UpdateUserAddressDTO:
    properties:
      address:
        type: string
      district:
        type: string
      lat:
        type: number
      long:
        type: number
      province:
        type: string
      subDistrict:
        type: string
      updatedAt:
        type: string
      zipcode:
        type: string
    type: object
  model.UserAddressDetail:
    properties:
      address:
        type: string
      address_id:
        type: string
      district:
        type: string
      lat:
        type: number
      long:
        type: number
      province:
        type: string
      subdistrict:
        type: string
      user_id:
        type: string
      zipcode:
        type: string
    type: object
  model.UserBranch:
    properties:
      branch:
        items:
          $ref: '#/definitions/model.Branch'
        type: array
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      phone:
        type: string
      profile_image_url:
        type: string
      role:
        $ref: '#/definitions/model.Roles'
      user_id:
        type: string
    type: object
  model.UserContract:
    properties:
      contracts:
        items:
          $ref: '#/definitions/model.EmployeeContract'
        type: array
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      phone:
        type: string
      profile_image_url:
        type: string
      role:
        $ref: '#/definitions/model.Roles'
      user_id:
        type: string
    type: object
  model.UserDTO:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
      phone:
        type: string
      profile_image_url:
        type: string
      role:
        $ref: '#/definitions/model.Roles'
    required:
    - email
    - firstname
    - lastname
    - password
    - role
    type: object
  model.UserGeoLocation:
    properties:
      user_lat:
        type: number
      user_lon:
        type: number
    required:
    - user_lat
    - user_lon
    type: object
  model.UserReview:
    properties:
      firstname:
        type: string
      lastname:
        type: string
      profile_image_url:
        type: string
      review_comment:
        type: string
      star_rating:
        type: integer
    type: object
  model.UserUpdateDTO:
    properties:
      firstname:
        type: string
      lastname:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/model.Roles'
    required:
    - firstname
    - lastname
    - role
    type: object
  model.UserUpdatePasswordDTO:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  model.Users:
    properties:
      created_at:
        type: string
      deleteAt:
        example: "null"
        type: string
      email:
        type: string
      firstname:
        type: string
      google_id:
        type: string
      lastname:
        type: string
      password:
        type: string
      phone:
        type: string
      profile_image_url:
        type: string
      role:
        $ref: '#/definitions/model.Roles'
      updated_at:
        type: string
      user_id:
        type: string
    type: object
info:
  contact: {}
  description: This is API document for Zuck-my-clothe API
  title: Zuck-my-clothe API
  version: "1.0"
paths:
  /address/add:
    post:
      consumes:
      - application/json
      description: Add a new user address information to system
      parameters:
      - description: New Address Data
        in: body
        name: UserAddresses
        required: true
        schema:
          $ref: '#/definitions/model.AddUserAddressDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.UserAddressDetail'
        "406":
          description: Not Acceptable
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Add new user address
      tags:
      - UserAddress
  /address/delete/{addressID}:
    delete:
      consumes:
      - application/json
      description: Delete requested address from system
      parameters:
      - description: Address ID
        in: path
        name: address_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            type: string
        "202":
          description: Accepted
          schema:
            type: string
        "204":
          description: record not found
          schema:
            type: string
      summary: Delete address
      tags:
      - UserAddress
  /address/detail/owner:
    get:
      consumes:
      - application/json
      description: List all owned address of thant user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserAddressDetail'
        "202":
          description: Accepted
          schema:
            type: string
      summary: Find owned address
      tags:
      - UserAddress
  /address/update:
    put:
      consumes:
      - application/json
      description: Update requested address information
      parameters:
      - description: New Address Data
        in: body
        name: UserAddresses
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserAddressDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserAddressDetail'
        "202":
          description: Accepted
          schema:
            type: string
        "204":
          description: record not found
          schema:
            type: string
        "406":
          description: Not Acceptable
          schema:
            type: string
      summary: Update address information
      tags:
      - UserAddress
  /auth/google/callback:
    post:
      consumes:
      - application/json
      description: Handle Google OAuth2 callback and log in or create a user
      parameters:
      - description: Google OAuth2 Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/model.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthenResponse'
        "204":
          description: User Data Fetch Failed
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Google OAuth2 Callback
      tags:
      - Authentication
  /auth/me:
    get:
      consumes:
      - application/json
      description: handle user data extraction and token expiration check
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthenResponse'
        "204":
          description: User Data Fetch Failed
          schema:
            type: string
        "401":
          description: token expired
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Extract User Data from JWT token
      tags:
      - Authentication
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Sign in user with credentials
      parameters:
      - description: Authentication Payload
        in: body
        name: authenPayload
        required: true
        schema:
          $ref: '#/definitions/model.AuthenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthenResponse'
        "400":
          description: Missing body
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Sign in to the application
      tags:
      - Authentication
  /branch/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a branch
      parameters:
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "404":
          description: record not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Delete branch
      tags:
      - Branches
    get:
      description: Retrieve a single branch from the database based on its ID.
      parameters:
      - description: branch ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BranchDetail'
        "204":
          description: Not Found
          schema:
            type: string
      summary: Get a branch by ID
      tags:
      - Branches
  /branch/all:
    get:
      consumes:
      - application/json
      description: Get a list of all branches
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Branch'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all branches
      tags:
      - Branches
  /branch/closest-to-me:
    post:
      consumes:
      - application/json
      description: Get a list of all branches closest to user
      parameters:
      - description: User geo location data
        in: body
        name: UserGeoLocation
        required: true
        schema:
          $ref: '#/definitions/model.UserGeoLocation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.BranchDetail'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get branches closest to user
      tags:
      - Branches
  /branch/create:
    post:
      consumes:
      - application/json
      description: Create a new branch by using Branch model
      parameters:
      - description: New Branch Data
        in: body
        name: BranchModel
        required: true
        schema:
          $ref: '#/definitions/model.CreateBranch'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "406":
          description: Not Acceptable
          schema:
            type: string
      summary: Create new branch
      tags:
      - Branches
  /branch/owner:
    get:
      consumes:
      - application/json
      description: Get branch details by branch owner
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Branch'
        "204":
          description: record not found
          schema:
            type: string
        "403":
          description: forbidden
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get branch by owner
      tags:
      - Branches
  /branch/update:
    put:
      consumes:
      - application/json
      description: Update branch details
      parameters:
      - description: Branch data
        in: body
        name: branch
        required: true
        schema:
          $ref: '#/definitions/model.UpdateBranch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Branch'
        "406":
          description: not acceptable
          schema:
            type: string
      summary: Update branch
      tags:
      - Branches
  /employee-contract:
    get:
      description: Get all employee contracts
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.EmployeeContract'
            type: array
        "204":
          description: No Content
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all employee contracts
      tags:
      - EmployeeContract
    post:
      consumes:
      - application/json
      description: Create a new employee contract
      parameters:
      - description: Employee Contract
        in: body
        name: contract
        required: true
        schema:
          $ref: '#/definitions/model.EmployeeContractDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "406":
          description: Not Acceptable
          schema:
            type: string
      summary: Create a new employee contract
      tags:
      - EmployeeContract
  /employee-contract/{contract_id}:
    delete:
      description: Soft delete an employee contract
      parameters:
      - description: Contract ID
        in: path
        name: contract_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.EmployeeContract'
        "204":
          description: No Content
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Soft delete an employee contract
      tags:
      - EmployeeContract
  /employee-contract/branch/{branch_id}:
    get:
      description: Get employee contracts by branch ID
      parameters:
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.EmployeeContract'
            type: array
        "204":
          description: No Content
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get employee contracts by branch ID
      tags:
      - EmployeeContract
  /employee-contract/user/{user_id}:
    get:
      description: Get employee contracts by user ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.EmployeeContract'
            type: array
        "204":
          description: No Content
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get employee contracts by user ID
      tags:
      - EmployeeContract
  /machine/add:
    post:
      consumes:
      - application/json
      description: Add a new machine to the system
      parameters:
      - description: New Machine Data
        in: body
        name: MachineModel
        required: true
        schema:
          $ref: '#/definitions/model.AddMachine'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Machine'
        "406":
          description: Not Acceptable
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Add new machine
      tags:
      - Machine
  /machine/all:
    get:
      description: Retrieve all machines in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Machine'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all machines
      tags:
      - Machine
  /machine/branch/{branch_id}:
    get:
      description: Get all machines under a specific branch
      parameters:
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Machine'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get machines by branch ID
      tags:
      - Machine
  /machine/delete/{serial_id}:
    delete:
      description: Soft delete a machine by its serial ID
      parameters:
      - description: Machine Serial ID
        in: path
        name: serial_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Machine'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Soft delete machine
      tags:
      - Machine
  /machine/detail/{serial_id}:
    get:
      description: Get details of a specific machine by its serial number
      parameters:
      - description: Machine Serial ID
        in: path
        name: serial_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Machine'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get machine details by serial
      tags:
      - Machine
  /machine/update/{serial_id}/set_active/{set_active}:
    put:
      description: Set the active status of a machine
      parameters:
      - description: Machine Serial ID
        in: path
        name: serial_id
        required: true
        type: string
      - description: Set Active (true/false)
        in: path
        name: set_active
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Machine'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update machine active status
      tags:
      - Machine
  /machine/update/{serial_id}/set_label/{label}:
    put:
      description: Update machine label
      parameters:
      - description: Machine Serial ID
        in: path
        name: serial_id
        required: true
        type: string
      - description: New label (int)
        in: path
        name: label
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Machine'
        "204":
          description: Not Content
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update machine label
      tags:
      - Machine
  /order/{order_header_id}/{option}:
    get:
      description: Retrieve full order by order header id
      parameters:
      - description: Order Header ID
        in: path
        name: order_header_id
        required: true
        type: string
      - description: Option = full, header, detail
        in: path
        name: option
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.FullOrder'
            type: array
        "404":
          description: Not Found - No orders available
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get full order by order header id
      tags:
      - Order
  /order/all:
    get:
      description: Retrieve all orders in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.OrderHeader'
            type: array
        "404":
          description: Not Found - No orders available
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all orders
      tags:
      - Order
  /order/branch/{branch_id}:
    get:
      description: Retrieve full order by branch id
      parameters:
      - description: branch id
        in: path
        name: branch_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.FullOrder'
            type: array
        "404":
          description: Not Found - No orders available
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get full order by branch id
      tags:
      - Order
  /order/create:
    post:
      consumes:
      - application/json
      description: Add a new order to the system
      parameters:
      - description: New Order Data
        in: body
        name: NewOrder
        required: true
        schema:
          $ref: '#/definitions/model.NewOrder'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.FullOrder'
        "400":
          description: Bad Request - Invalid input
          schema:
            type: string
        "406":
          description: Not Acceptable - Validation failed
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add new order
      tags:
      - Order
  /order/delete/{order_header_id}:
    delete:
      consumes:
      - application/json
      description: Delete an order
      parameters:
      - description: Order Header ID
        in: path
        name: order_header_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "404":
          description: record not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Delete an order
      tags:
      - Order
  /order/me:
    get:
      description: Retrieve full order by user id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.FullOrder'
            type: array
        "404":
          description: Not Found - No orders available
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get full order by user id
      tags:
      - Order
  /order/review:
    put:
      description: Update order review
      parameters:
      - description: Updated order field
        in: body
        name: OrderReview
        required: true
        schema:
          $ref: '#/definitions/model.OrderReview'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FullOrder'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update order review
      tags:
      - Order
  /order/update:
    put:
      description: Update order status
      parameters:
      - description: Updated order field
        in: body
        name: UpdateOrder
        required: true
        schema:
          $ref: '#/definitions/model.UpdateOrder'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FullOrder'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update order status
      tags:
      - Order
  /payment/add:
    post:
      consumes:
      - application/json
      description: Add a new payment record to db [mockup]
      parameters:
      - description: New Payment Data
        in: body
        name: PaymentModel
        required: true
        schema:
          $ref: '#/definitions/model.Payments'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Payments'
        "202":
          description: Accepted
          schema:
            type: string
      summary: Add new payment
      tags:
      - Payment
  /payment/detail/{paymentID}:
    get:
      description: Find payment by paymentID [mockup]
      parameters:
      - description: PaymentID
        in: path
        name: paymentID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Payments'
        "204":
          description: no content
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Find payment by id
      tags:
      - Payment
  /report/:
    get:
      description: Retrieve all machine reports in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MachineReportDetail'
            type: array
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all machine reports
      tags:
      - Machine Reports
  /report/add:
    post:
      consumes:
      - application/json
      description: Create a new machine report for a specific user
      parameters:
      - description: Machine Report
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/model.AddMachineReportDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MachineReportDetail'
        "202":
          description: Validation error
          schema:
            type: string
        "406":
          description: Invalid request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new machine report
      tags:
      - Machine Reports
  /report/branch/{branchID}:
    get:
      description: Retrieve all machine reports for a specific branch
      parameters:
      - description: Branch ID
        in: path
        name: branchID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MachineReportDetail'
            type: array
        "202":
          description: No records found
          schema:
            type: string
        "204":
          description: Invalid request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get machine reports by branch ID
      tags:
      - Machine Reports
  /report/delete/{reportID}:
    delete:
      description: Delete a specific machine report by ID
      parameters:
      - description: Report ID
        in: path
        name: reportID
        required: true
        type: string
      responses:
        "200":
          description: Successfully deleted
          schema:
            type: string
        "204":
          description: Record not found
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Invalid request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a machine report
      tags:
      - Machine Reports
  /report/update:
    put:
      consumes:
      - application/json
      description: Update the status of a specific machine report
      parameters:
      - description: Updated Status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/model.UpdateMachineReportStatusDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MachineReportDetail'
        "204":
          description: Record not found
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Invalid request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update the status of a machine report
      tags:
      - Machine Reports
  /report/user/{userID}:
    get:
      description: Retrieve all machine reports associated with a specific user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MachineReportDetail'
            type: array
        "202":
          description: Accepted
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get machine reports by user ID
      tags:
      - Machine Reports
  /users/:
    post:
      consumes:
      - application/json
      description: Create a new user by using User model
      parameters:
      - description: New User Data
        in: body
        name: UserModel
        required: true
        schema:
          $ref: '#/definitions/model.UserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "403":
          description: Forbidden
          schema:
            type: string
        "406":
          description: Not Acceptable
          schema:
            type: string
      summary: Create new user
      tags:
      - Users
  /users/:id:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: struct
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete user
      tags:
      - Users
  /users/{id}:
    get:
      description: Get a user by ID from the database
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Users'
        "204":
          description: record not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get a user by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated User Data
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/model.UserUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Users'
        "403":
          description: Forbidden
          schema:
            type: string
        "406":
          description: Not Acceptable
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update user
      tags:
      - Users
  /users/{id}/password:
    patch:
      consumes:
      - application/json
      description: Update the password of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: New password data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UserUpdatePasswordDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            type: string
        "403":
          description: You are not allowed to update
          schema:
            type: string
        "406":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update user password
      tags:
      - Users
  /users/all:
    get:
      description: Retrieve all users from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserBranch'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all users
      tags:
      - Users
  /users/branch/{branch_id}:
    get:
      description: Get employees by branch ID
      parameters:
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserContract'
            type: array
        "204":
          description: No Content
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get employees by branch ID
      tags:
      - Users
  /users/manager/all:
    get:
      consumes:
      - application/json
      description: Get a list of all managers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Users'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all managers
      tags:
      - Users
swagger: "2.0"
