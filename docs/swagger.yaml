basePath: /
definitions:
  model.AddMachineDTO:
    properties:
      branch_id:
        type: string
      createdBy:
        type: string
      machine_serial:
        type: string
      machine_type:
        $ref: '#/definitions/model.MachineType'
      weight:
        minimum: 0
        type: integer
    required:
    - branch_id
    - machine_serial
    - machine_type
    - weight
    type: object
  model.AuthenDetial:
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      profile_image_url:
        type: string
      role:
        $ref: '#/definitions/model.Roles'
      surname:
        type: string
      user_id:
        type: string
    type: object
  model.AuthenPayload:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/model.Roles'
      user_id:
        type: string
    type: object
  model.AuthenResponse:
    properties:
      data:
        $ref: '#/definitions/model.AuthenDetail'
      token:
        type: string
    type: object
  model.Branch:
    properties:
      branch_detail:
        type: string
      branch_id:
        type: string
      branch_lat:
        type: number
      branch_long:
        type: number
      branch_name:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      deleted_by:
        type: string
      deletedAt:
        type: string
      owner_user_id:
        type: string
      updated_by:
        type: string
      updatedAt:
        type: string
    type: object
  model.MachineDetail:
    properties:
      branch_id:
        type: string
      is_active:
        type: boolean
      machine_serial:
        type: string
      machine_type:
        $ref: '#/definitions/model.MachineType'
      weight:
        type: integer
    type: object
  model.MachineType:
    enum:
    - Washer
    - Dryer
    type: string
    x-enum-varnames:
    - Washer
    - Dryer
  model.RequestBody:
    properties:
      accessToken:
        type: string
    type: object
  model.Roles:
    enum:
    - SuperAdmin
    - BranchManager
    - Employee
    - Client
    type: string
    x-enum-varnames:
    - SuperAdmin
    - BranchManager
    - Employee
    - Client
  model.Users:
    properties:
      created_at:
        type: string
      deleteAt:
        type: string
      email:
        type: string
      firstname:
        type: string
      google_id:
        type: string
      lastname:
        type: string
      password:
        type: string
      phone:
        type: string
      profile_image_url:
        type: string
      role:
        $ref: '#/definitions/model.Roles'
      updated_at:
        type: string
      user_id:
        type: string
    type: object
info:
  contact: {}
  description: This is API document for Zuck-my-clothe API
  title: Zuck-my-clothe API
  version: "1.0"
paths:
  /{id}:
    get:
      description: Retrieve a single branch from the database based on its ID.
      parameters:
      - description: branch ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Branch'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get a branch by ID
      tags:
      - Branch Controller
  /auth/google/callback:
    post:
      consumes:
      - application/json
      description: Handle Google OAuth2 callback and log in or create a user
      parameters:
      - description: Google OAuth2 Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/model.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthenResponse'
        "204":
          description: User Data Fetch Failed
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Google OAuth2 Callback
      tags:
      - Authentication
  /auth/me:
    get:
      consumes:
      - application/json
      description: handle user data extraction and token expiration check
      parameters:
      - description: Bearer {access_token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthenResponse'
        "204":
          description: User Data Fetch Failed
          schema:
            type: string
        "401":
          description: token expired
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Extract User Data from JWT token
      tags:
      - Authentication
  /create:
    post:
      consumes:
      - application/json
      description: Create a new branch by using Branch model
      parameters:
      - description: New Branch Data
        in: body
        name: BranchModel
        required: true
        schema:
          $ref: '#/definitions/model.Branch'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "403":
          description: Forbidden
          schema:
            type: string
        "406":
          description: Not Acceptable
          schema:
            type: string
      summary: Create new branch
      tags:
      - Branch Controller
  /machine/{serial_id}:
    get:
      description: Get details of a specific machine by its serial number
      parameters:
      - description: Machine Serial ID
        in: path
        name: serial_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MachineDetail'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get machine details by serial
      tags:
      - Machine
  /machine/add:
    post:
      consumes:
      - application/json
      description: Add a new machine to the system
      parameters:
      - description: New Machine Data
        in: body
        name: MachineModel
        required: true
        schema:
          $ref: '#/definitions/model.AddMachineDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.MachineDetail'
        "403":
          description: Forbidden
          schema:
            type: string
        "406":
          description: Not Acceptable
          schema:
            type: string
      summary: Add new machine
      tags:
      - Machine
  /machine/all:
    get:
      description: Retrieve all machines in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MachineDetail'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all machines
      tags:
      - Machine
  /machine/branch/{branch_id}:
    get:
      description: Get all machines under a specific branch
      parameters:
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MachineDetail'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get machines by branch ID
      tags:
      - Machine
  /machine/delete/{serial_id}:
    delete:
      description: Soft delete a machine by its serial ID
      parameters:
      - description: Machine Serial ID
        in: path
        name: serial_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MachineDetail'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Soft delete machine
      tags:
      - Machine
  /machine/update/{serial_id}/set_active/{set_active}:
    put:
      description: Set the active status of a machine
      parameters:
      - description: Machine Serial ID
        in: path
        name: serial_id
        required: true
        type: string
      - description: Set Active (true/false)
        in: path
        name: set_active
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MachineDetail'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update machine active status
      tags:
      - Machine
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user by using User model
      parameters:
      - description: New User Data
        in: body
        name: UserModel
        required: true
        schema:
          $ref: '#/definitions/model.Users'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "403":
          description: Forbidden
          schema:
            type: string
        "406":
          description: Not Acceptable
          schema:
            type: string
      summary: Create new user
      tags:
      - User Controller
  /signin:
    post:
      consumes:
      - application/json
      description: Sign in user with credentials
      parameters:
      - description: Authentication Payload
        in: body
        name: authenPayload
        required: true
        schema:
          $ref: '#/definitions/model.AuthenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthenResponse'
        "400":
          description: Missing body
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Sign in to the application
      tags:
      - Authentication
  /testrout:
    get:
      consumes:
      - application/json
      description: Returns a simple message to verify the endpoint.
      produces:
      - text/plain
      responses:
        "200":
          description: Gu Hum Yaii
          schema:
            type: string
      summary: Test Controller
      tags:
      - Test
swagger: "2.0"
