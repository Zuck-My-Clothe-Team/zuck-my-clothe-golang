{
    "swagger": "2.0",
    "info": {
        "description": "This is API document for Zuck-my-clothe API",
        "title": "Zuck-my-clothe API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/",
    "paths": {
        "/address/add": {
            "post": {
                "description": "Add a new user address information to system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAddress"
                ],
                "summary": "Add new user address",
                "parameters": [
                    {
                        "description": "New Address Data",
                        "name": "UserAddresses",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AddUserAddressDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.UserAddressDetail"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/address/delete/{addressID}": {
            "delete": {
                "description": "Delete requested address from system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAddress"
                ],
                "summary": "Delete address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address ID",
                        "name": "address_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "204": {
                        "description": "record not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/address/detail/owner": {
            "get": {
                "description": "List all owned address of thant user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAddress"
                ],
                "summary": "Find owned address",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserAddressDetail"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/address/update": {
            "put": {
                "description": "Update requested address information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAddress"
                ],
                "summary": "Update address information",
                "parameters": [
                    {
                        "description": "New Address Data",
                        "name": "UserAddresses",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateUserAddressDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserAddressDetail"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "204": {
                        "description": "record not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/google/callback": {
            "post": {
                "description": "Handle Google OAuth2 callback and log in or create a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Google OAuth2 Callback",
                "parameters": [
                    {
                        "description": "Google OAuth2 Request Body",
                        "name": "requestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AuthenResponse"
                        }
                    },
                    "204": {
                        "description": "User Data Fetch Failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "handle user data extraction and token expiration check",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Extract User Data from JWT token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {access_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AuthenResponse"
                        }
                    },
                    "204": {
                        "description": "User Data Fetch Failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "token expired",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "description": "Sign in user with credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Sign in to the application",
                "parameters": [
                    {
                        "description": "Authentication Payload",
                        "name": "authenPayload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AuthenPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AuthenResponse"
                        }
                    },
                    "400": {
                        "description": "Missing body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/branch/all": {
            "get": {
                "description": "Get a list of all branches",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Branches"
                ],
                "summary": "Get all branches",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Branch"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/branch/closest-to-me": {
            "post": {
                "description": "Get a list of all branches closest to user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Branches"
                ],
                "summary": "Get branches closest to user",
                "parameters": [
                    {
                        "description": "User geo location data",
                        "name": "UserGeoLocation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserGeoLocation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.BranchDetail"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/branch/create": {
            "post": {
                "description": "Create a new branch by using Branch model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Branches"
                ],
                "summary": "Create new branch",
                "parameters": [
                    {
                        "description": "New Branch Data",
                        "name": "BranchModel",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateBranchDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/branch/owner": {
            "get": {
                "description": "Get branch details by branch owner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Branches"
                ],
                "summary": "Get branch by owner",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Branch"
                        }
                    },
                    "204": {
                        "description": "record not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/branch/update": {
            "put": {
                "description": "Update branch details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Branches"
                ],
                "summary": "Update branch",
                "parameters": [
                    {
                        "description": "Branch data",
                        "name": "branch",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateBranchDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Branch"
                        }
                    },
                    "406": {
                        "description": "not acceptable",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/branch/{id}": {
            "get": {
                "description": "Retrieve a single branch from the database based on its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Branches"
                ],
                "summary": "Get a branch by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "branch ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Branch"
                        }
                    },
                    "204": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a branch",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Branches"
                ],
                "summary": "Delete branch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Branch ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "record not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/employee-contract": {
            "get": {
                "description": "Get all employee contracts",
                "tags": [
                    "EmployeeContract"
                ],
                "summary": "Get all employee contracts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.EmployeeContract"
                            }
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new employee contract",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EmployeeContract"
                ],
                "summary": "Create a new employee contract",
                "parameters": [
                    {
                        "description": "Employee Contract",
                        "name": "contract",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EmployeeContractDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/employee-contract/branch/{branch_id}": {
            "get": {
                "description": "Get employee contracts by branch ID",
                "tags": [
                    "EmployeeContract"
                ],
                "summary": "Get employee contracts by branch ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Branch ID",
                        "name": "branch_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.EmployeeContract"
                            }
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/employee-contract/user/{user_id}": {
            "get": {
                "description": "Get employee contracts by user ID",
                "tags": [
                    "EmployeeContract"
                ],
                "summary": "Get employee contracts by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.EmployeeContract"
                            }
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/employee-contract/{contract_id}": {
            "delete": {
                "description": "Soft delete an employee contract",
                "tags": [
                    "EmployeeContract"
                ],
                "summary": "Soft delete an employee contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contract ID",
                        "name": "contract_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EmployeeContract"
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/machine/add": {
            "post": {
                "description": "Add a new machine to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machine"
                ],
                "summary": "Add new machine",
                "parameters": [
                    {
                        "description": "New Machine Data",
                        "name": "MachineModel",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AddMachineDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Machine"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/machine/all": {
            "get": {
                "description": "Retrieve all machines in the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machine"
                ],
                "summary": "Get all machines",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Machine"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/machine/branch/{branch_id}": {
            "get": {
                "description": "Get all machines under a specific branch",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machine"
                ],
                "summary": "Get machines by branch ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Branch ID",
                        "name": "branch_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Machine"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/machine/delete/{serial_id}": {
            "delete": {
                "description": "Soft delete a machine by its serial ID",
                "tags": [
                    "Machine"
                ],
                "summary": "Soft delete machine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine Serial ID",
                        "name": "serial_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Machine"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/machine/update/{serial_id}/set_active/{set_active}": {
            "put": {
                "description": "Set the active status of a machine",
                "tags": [
                    "Machine"
                ],
                "summary": "Update machine active status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine Serial ID",
                        "name": "serial_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Set Active (true/false)",
                        "name": "set_active",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Machine"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/machine/update/{serial_id}/set_label/{label}": {
            "put": {
                "description": "Update machine label",
                "tags": [
                    "Machine"
                ],
                "summary": "Update machine label",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine Serial ID",
                        "name": "serial_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New label (int)",
                        "name": "label",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Machine"
                        }
                    },
                    "204": {
                        "description": "Not Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/machine/{serial_id}": {
            "get": {
                "description": "Get details of a specific machine by its serial number",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Machine"
                ],
                "summary": "Get machine details by serial",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Machine Serial ID",
                        "name": "serial_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Machine"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/payment/add": {
            "post": {
                "description": "Add a new payment record to db [mockup]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Add new payment",
                "parameters": [
                    {
                        "description": "New Payment Data",
                        "name": "PaymentModel",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Payments"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Payments"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/payment/detail/{paymentID}": {
            "get": {
                "description": "Find payment by paymentID [mockup]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Find payment by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentID",
                        "name": "paymentID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Payments"
                        }
                    },
                    "204": {
                        "description": "no content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/": {
            "post": {
                "description": "Create a new user by using User model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "New User Data",
                        "name": "UserModel",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/:id": {
            "delete": {
                "description": "Delete a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "struct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/all": {
            "get": {
                "description": "Retrieve all users from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.UserBranch"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/branch/{branch_id}": {
            "get": {
                "description": "Get employees by branch ID",
                "tags": [
                    "Users"
                ],
                "summary": "Get employees by branch ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Branch ID",
                        "name": "branch_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.UserContract"
                            }
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/manager/all": {
            "get": {
                "description": "Get a list of all managers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all managers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Users"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "patch": {
                "description": "Update user details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated User Data",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserUpdateDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Users"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}/password": {
            "patch": {
                "description": "Update the password of a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New password data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserUpdatePasswordDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "You are not allowed to update",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "406": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.AddMachineDTO": {
            "type": "object",
            "required": [
                "branch_id",
                "machine_label",
                "machine_serial",
                "machine_type",
                "weight"
            ],
            "properties": {
                "branch_id": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "machine_label": {
                    "type": "integer"
                },
                "machine_serial": {
                    "type": "string"
                },
                "machine_type": {
                    "$ref": "#/definitions/model.MachineType"
                },
                "weight": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "model.AddUserAddressDTO": {
            "type": "object",
            "required": [
                "address",
                "district",
                "lat",
                "long",
                "province",
                "subdistrict",
                "zipcode"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "address_id": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "lat": {
                    "type": "number"
                },
                "long": {
                    "type": "number"
                },
                "province": {
                    "type": "string"
                },
                "subdistrict": {
                    "type": "string"
                },
                "zipcode": {
                    "type": "string"
                }
            }
        },
        "model.AuthenDetail": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profile_image_url": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/model.Roles"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.AuthenPayload": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/model.Roles"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.AuthenResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.AuthenDetail"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "model.Branch": {
            "type": "object",
            "properties": {
                "branch_detail": {
                    "type": "string"
                },
                "branch_id": {
                    "type": "string"
                },
                "branch_lat": {
                    "type": "number"
                },
                "branch_long": {
                    "type": "number"
                },
                "branch_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "null"
                },
                "deleted_by": {
                    "type": "string"
                },
                "owner_user_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "model.BranchDetail": {
            "type": "object",
            "properties": {
                "branch_detail": {
                    "type": "string"
                },
                "branch_id": {
                    "type": "string"
                },
                "branch_lat": {
                    "type": "number"
                },
                "branch_long": {
                    "type": "number"
                },
                "branch_name": {
                    "type": "string"
                },
                "distance": {
                    "type": "number"
                },
                "owner_user_id": {
                    "type": "string"
                }
            }
        },
        "model.CreateBranchDTO": {
            "type": "object",
            "required": [
                "branch_detail",
                "branch_lat",
                "branch_long",
                "branch_name",
                "owner_user_id"
            ],
            "properties": {
                "branch_detail": {
                    "type": "string"
                },
                "branch_lat": {
                    "type": "number"
                },
                "branch_long": {
                    "type": "number"
                },
                "branch_name": {
                    "type": "string"
                },
                "owner_user_id": {
                    "type": "string"
                }
            }
        },
        "model.EmployeeContract": {
            "type": "object",
            "properties": {
                "branch_id": {
                    "type": "string"
                },
                "contract_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "null"
                },
                "deleted_by": {
                    "type": "string"
                },
                "position_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.EmployeeContractDTO": {
            "type": "object",
            "required": [
                "branch_id",
                "created_by",
                "position_id",
                "user_id"
            ],
            "properties": {
                "branch_id": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "position_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.Machine": {
            "type": "object",
            "properties": {
                "branch_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "null"
                },
                "deleted_by": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "machine_label": {
                    "type": "string"
                },
                "machine_serial": {
                    "type": "string"
                },
                "machine_type": {
                    "$ref": "#/definitions/model.MachineType"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            }
        },
        "model.MachineType": {
            "type": "string",
            "enum": [
                "Washer",
                "Dryer"
            ],
            "x-enum-varnames": [
                "Washer",
                "Dryer"
            ]
        },
        "model.PaymentStatus": {
            "type": "string",
            "enum": [
                "Pending",
                "Completed",
                "Expired",
                "Cancel"
            ],
            "x-enum-varnames": [
                "Pending",
                "Completed",
                "Expired",
                "Cancel"
            ]
        },
        "model.Payments": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "null"
                },
                "due_date": {
                    "type": "string"
                },
                "payment_id": {
                    "type": "string"
                },
                "payment_status": {
                    "$ref": "#/definitions/model.PaymentStatus"
                }
            }
        },
        "model.RequestBody": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                }
            }
        },
        "model.Roles": {
            "type": "string",
            "enum": [
                "SuperAdmin",
                "BranchManager",
                "Employee",
                "Client"
            ],
            "x-enum-varnames": [
                "SuperAdmin",
                "BranchManager",
                "Employee",
                "Client"
            ]
        },
        "model.UpdateBranchDTO": {
            "type": "object",
            "required": [
                "branch_detail",
                "branch_id",
                "branch_lat",
                "branch_long",
                "branch_name",
                "owner_user_id"
            ],
            "properties": {
                "branch_detail": {
                    "type": "string"
                },
                "branch_id": {
                    "type": "string"
                },
                "branch_lat": {
                    "type": "number"
                },
                "branch_long": {
                    "type": "number"
                },
                "branch_name": {
                    "type": "string"
                },
                "owner_user_id": {
                    "type": "string"
                }
            }
        },
        "model.UpdateUserAddressDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "lat": {
                    "type": "number"
                },
                "long": {
                    "type": "number"
                },
                "province": {
                    "type": "string"
                },
                "subDistrict": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "zipcode": {
                    "type": "string"
                }
            }
        },
        "model.UserAddressDetail": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "address_id": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "lat": {
                    "type": "number"
                },
                "long": {
                    "type": "number"
                },
                "province": {
                    "type": "string"
                },
                "subdistrict": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "zipcode": {
                    "type": "string"
                }
            }
        },
        "model.UserBranch": {
            "type": "object",
            "properties": {
                "branch": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Branch"
                    }
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profile_image_url": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/model.Roles"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.UserContract": {
            "type": "object",
            "properties": {
                "contracts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.EmployeeContract"
                    }
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profile_image_url": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/model.Roles"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.UserDTO": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "password",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profile_image_url": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/model.Roles"
                }
            }
        },
        "model.UserGeoLocation": {
            "type": "object",
            "required": [
                "user_lat",
                "user_lon"
            ],
            "properties": {
                "user_lat": {
                    "type": "number"
                },
                "user_lon": {
                    "type": "number"
                }
            }
        },
        "model.UserUpdateDTO": {
            "type": "object",
            "required": [
                "firstname",
                "lastname",
                "role"
            ],
            "properties": {
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/model.Roles"
                }
            }
        },
        "model.UserUpdatePasswordDTO": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "model.Users": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleteAt": {
                    "type": "string",
                    "example": "null"
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "google_id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profile_image_url": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/model.Roles"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    }
}